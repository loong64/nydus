name: Release

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag'
        required: true
        default: ''

env:
  CARGO_TERM_COLOR: always

jobs:
  nydus-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [loong64]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        repository: dragonflyoss/nydus
        ref: ${{ github.event.inputs.tag }}
    - name: Cache cargo
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: ${{ runner.os }}-cargo-${{ matrix.arch }}
    - uses: dsherret/rust-toolchain-file@v1
    - name: Build nydus-rs
      run: |
        sed -i 's@0.10.55@0.10@g' Cargo.toml
        declare -A rust_target_map=( ["amd64"]="x86_64-unknown-linux-musl" ["arm64"]="aarch64-unknown-linux-musl" ["ppc64le"]="powerpc64le-unknown-linux-gnu" ["riscv64"]="riscv64gc-unknown-linux-gnu" ["loong64"]="loongarch64-unknown-linux-gnu" )
        RUST_TARGET=${rust_target_map[${{ matrix.arch }}]}
        rustup target add loongarch64-unknown-linux-gnu
        cargo install --version 0.2.4 cross
        make -e RUST_TARGET_STATIC=$RUST_TARGET -e CARGO=cross static-release
        sudo mv target/$RUST_TARGET/release/nydusd nydusd
        sudo mv target/$RUST_TARGET/release/nydus-image .
        sudo mv target/$RUST_TARGET/release/nydusctl .
        sudo cp -r misc/configs .
        sudo chown -R $(id -un):$(id -gn) . ~/.cargo/
    - name: store-artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nydus-artifacts-linux-${{ matrix.arch }}
        path: |
          nydusd
          nydus-image
          nydusctl
          configs

  contrib-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [loong64]
    env:
      DOCKER: false
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        repository: dragonflyoss/nydus
        ref: ${{ github.event.inputs.tag }}
    - name: Setup Golang
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.work'
        cache-dependency-path: "**/*.sum"
    - name: build contrib go components
      run: |
        sed -i 's@golang:1.21@ghcr.io/loong64/golang:1.21@g' Makefile
        make -e GOARCH=${{ matrix.arch }} contrib-release
        sudo mv contrib/nydusify/cmd/nydusify .
        sudo mv contrib/nydus-overlayfs/bin/nydus-overlayfs .
    - name: store-artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nydus-artifacts-linux-${{ matrix.arch }}-contrib
        path: |
          nydusify
          nydus-overlayfs
          containerd-nydus-grpc

  prepare-tarball-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [loong64]
        os: [linux]
    needs: [nydus-linux, contrib-linux]
    steps:
    - name: download artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: nydus-artifacts-${{ matrix.os }}-${{ matrix.arch }}*
        merge-multiple: true
        path: nydus-static
    - name: prepare release tarball
      run: |
        tag=${{ github.event.inputs.tag }}
        tarball="nydus-static-$tag-${{ matrix.os }}-${{ matrix.arch }}.tgz"
        chmod +x nydus-static/*
        tar cf - nydus-static | gzip > ${tarball}
        echo "tarball=${tarball}" >> $GITHUB_ENV

        shasum="$tarball.sha256sum"
        sha256sum $tarball > $shasum
        echo "tarball_shasum=${shasum}" >> $GITHUB_ENV
    - name: store-artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nydus-release-tarball-${{ matrix.os }}-${{ matrix.arch }}
        path: |
          ${{ env.tarball }}
          ${{ env.tarball_shasum }}

  create-release:
    runs-on: ubuntu-latest
    needs: [prepare-tarball-linux]
    steps:
    - name: create tag
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git tag ${{ github.event.inputs.tag }}
        git push origin ${{ github.event.inputs.tag }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: download artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: nydus-release-tarball-*
        merge-multiple: true
        path: nydus-tarball
    - name: prepare release env
      run: |
        echo "tarballs<<EOF" >> $GITHUB_ENV
        for I in $(ls nydus-tarball);do echo "nydus-tarball/${I}" >> $GITHUB_ENV; done
        echo "EOF" >> $GITHUB_ENV
        tag=${{ github.event.inputs.tag }}
        echo "tag=${tag}" >> $GITHUB_ENV
        cat $GITHUB_ENV
    - name: push release
      uses: softprops/action-gh-release@v2
      with:
        name: "Nydus Image Service ${{ env.tag }}"
        body: |
          **Full Changelog**: [${{ env.tag }}](https://github.com/dragonflyoss/nydus/releases/tag/${{ env.tag }})
        generate_release_notes: true
        files: |
          ${{ env.tarballs }}
