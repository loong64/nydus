name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build'
        required: false
        default: ''
  schedule:
    - cron: '0 20 * * *'

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      build: ${{ steps.check-build.outputs.build }}
    steps:
      - name: Check Version
        id: get-version
        run: |
          if [ -n "${{ inputs.version }}" ]; then
            version="${{ inputs.version }}"
          else
            version=$(curl -s 'https://api.github.com/repos/dragonflyoss/nydus/releases/latest' | jq -r ".tag_name")
          fi
          echo "Current Version: ${version}"
          if [ -z "${version}" ] || [ "${version}" == "null" ]; then
            echo "Failed to get version"
            exit 1
          fi
          echo "version=${version}" >> $GITHUB_ENV
          echo "version=${version}" >> $GITHUB_OUTPUT

      - name: Check Build
        id: check-build
        run: |
          gh release view ${version} -R ${{ github.repository }} >/dev/null 2>&1 || echo "build=1" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  nydus-linux:
    runs-on: ubuntu-latest
    needs: check
    if: needs.check.outputs.build == '1'
    strategy:
      matrix:
        arch: [loong64]
    env:
      version: ${{ needs.check.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        repository: dragonflyoss/nydus
        ref: ${{ env.version }}
    - name: Cache cargo
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: ${{ runner.os }}-cargo-${{ matrix.arch }}
    - uses: dsherret/rust-toolchain-file@v1
    - name: Read Rust toolchain version
      id: set_toolchain_version
      run: |
        RUST_TOOLCHAIN_VERSION=$(grep -oP '(?<=channel = ")[^"]*' rust-toolchain.toml)
        echo "Rust toolchain version: $RUST_TOOLCHAIN_VERSION"
        echo "rust-version=$RUST_TOOLCHAIN_VERSION" >> $GITHUB_OUTPUT
        sed -i 's@FROM ubuntu:latest@FROM debian:trixie@g' .github/workflows/Dockerfile.cross
        sed -i 's@riscv64gc@loongarch64@g' .github/workflows/Dockerfile.cross
        sed -i 's@riscv64@loongarch64@g' .github/workflows/Dockerfile.cross
        sed -i 's@software-properties-common@# software-properties-common@g' .github/workflows/Dockerfile.cross
        sed -i 's@RUN add-apt-repository@RUN echo add-apt-repository@g' .github/workflows/Dockerfile.cross

      shell: bash
    - name: Set up Docker Buildx
      if: matrix.arch == 'loong64'
      uses: docker/setup-buildx-action@v3
    - name: Build and push Docker image
      if: matrix.arch == 'loong64'
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./.github/workflows/Dockerfile.cross
        push: false
        load: true
        tags: rust-cross-compile-loong64:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          RUST_VERSION=${{ steps.set_toolchain_version.outputs.rust-version }}
    - name : Build Nydus-rs LoongArch
      if: matrix.arch == 'loong64'
      run: |
        RUST_TARGET=loongarch64-unknown-linux-gnu
        echo '[patch.crates-io]' >> Cargo.toml
        echo 'nix = { git = "https://github.com/loong64/nix", branch = "loong64-v0.24.0" }' >> Cargo.toml
        echo 'dbs-snapshot = { git = "https://github.com/loong64/dbs-snapshot", branch = "loong64-v1.5.2" }' >> Cargo.toml
        docker run --rm -v ${{ github.workspace }}:/root/src rust-cross-compile-loong64:latest \
        sh -c "cd /root/src && cargo update -p nix && make -e RUST_TARGET_STATIC=$RUST_TARGET static-release"
    - name: Prepare to upload artifacts
      run: |
        declare -A rust_target_map=( ["amd64"]="x86_64-unknown-linux-musl" ["arm64"]="aarch64-unknown-linux-musl" ["ppc64le"]="powerpc64le-unknown-linux-gnu" ["riscv64"]="riscv64gc-unknown-linux-gnu" ["loong64"]="loongarch64-unknown-linux-gnu")
        RUST_TARGET=${rust_target_map[${{ matrix.arch }}]}
        sudo mv target/$RUST_TARGET/release/nydusd nydusd
        sudo mv target/$RUST_TARGET/release/nydus-image .
        sudo mv target/$RUST_TARGET/release/nydusctl .
        sudo cp -r misc/configs .
        sudo chown -R $(id -un):$(id -gn) . ~/.cargo/
    - name: store-artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nydus-artifacts-linux-${{ matrix.arch }}
        path: |
          nydusd
          nydus-image
          nydusctl
          configs

  contrib-linux:
    runs-on: ubuntu-latest
    needs: check
    if: needs.check.outputs.build == '1'
    strategy:
      matrix:
        arch: [loong64]
    env:
      DOCKER: false
      version: ${{ needs.check.outputs.version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        repository: dragonflyoss/nydus
        ref: ${{ env.version }}
    - name: Setup Golang
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.work'
        cache-dependency-path: "**/*.sum"
    - name: build contrib go components
      run: |
        sed -i 's@golang:1.21@ghcr.io/loong64/golang:1.21@g' Makefile
        make -e GOARCH=${{ matrix.arch }} contrib-release
        sudo mv contrib/nydusify/cmd/nydusify .
        sudo mv contrib/nydus-overlayfs/bin/nydus-overlayfs .
    - name: store-artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nydus-artifacts-linux-${{ matrix.arch }}-contrib
        path: |
          nydusify
          nydus-overlayfs
          containerd-nydus-grpc

  prepare-tarball-linux:
    runs-on: ubuntu-latest
    if: needs.check.outputs.build == '1'
    strategy:
      matrix:
        arch: [loong64]
        os: [linux]
    needs: [check, nydus-linux, contrib-linux]
    env:
      version: ${{ needs.check.outputs.version }}
    steps:
    - name: download artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: nydus-artifacts-${{ matrix.os }}-${{ matrix.arch }}*
        merge-multiple: true
        path: nydus-static
    - name: prepare release tarball
      run: |
        tarball="nydus-static-${{ env.version }}-${{ matrix.os }}-${{ matrix.arch }}.tgz"
        chmod +x nydus-static/*
        tar cf - nydus-static | gzip > ${tarball}
        echo "tarball=${tarball}" >> $GITHUB_ENV

        shasum="$tarball.sha256sum"
        sha256sum $tarball > $shasum
        echo "tarball_shasum=${shasum}" >> $GITHUB_ENV
    - name: store-artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nydus-release-tarball-${{ matrix.os }}-${{ matrix.arch }}
        path: |
          ${{ env.tarball }}
          ${{ env.tarball_shasum }}

  create-release:
    runs-on: ubuntu-latest
    if: needs.check.outputs.build == '1'
    needs: [check, prepare-tarball-linux]
    env:
      version: ${{ needs.check.outputs.version }}
    steps:
    - name: download artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: nydus-release-tarball-*
        merge-multiple: true
        path: nydus-tarball
    - name: prepare release env
      run: |
        echo "tarballs<<EOF" >> $GITHUB_ENV
        for I in $(ls nydus-tarball);do echo "nydus-tarball/${I}" >> $GITHUB_ENV; done
        echo "EOF" >> $GITHUB_ENV
        cat $GITHUB_ENV
    - name: push release
      uses: softprops/action-gh-release@v2
      with:
        name: "Nydus Image Service ${{ env.version }}"
        tag_name: ${{ env.version }}
        generate_release_notes: true
        files: |
          ${{ env.tarballs }}
